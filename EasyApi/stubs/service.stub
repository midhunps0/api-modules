<?php
namespace App\Services;

use App\Models\$CLASS_NAME$;
use Modules\Ynotz\EasyApi\Traits\DefaultApiCrudHelper;
use Modules\Ynotz\EasyApi\Contracts\ApiCrudHelperContract;

class $CLASS_NAME$Service implements ApiCrudHelperContract {
    use DefaultApiCrudHelper;

    public function __construct()
    {
        $this->modelClass = $CLASS_NAME$::class;

        // $this->query = null;
        // $this->idKey = 'id'; // id column in the db table to identify the items
        // $this->selects = '*'; // array of field namess to be selected or '*' for all fields
        // $this->selIdsKey = 'id'; // selected items id key
        // $this->searchesMap = []; // associative array mapping search query params to db
        // $this->searchTypesSettings = [
        //     'name' => OperationEnum::EQUAL_TO // Example
        // ]; // Associative array mentioning what operation (OperationEnum case) is to be applied on each search field. Default for all fields is OperatoinEnum::EQUAL_TO. This will be overridden by search_types[] input from front-end.
        // $this->sortsMap = []; // associative array mapping sort query params to db columns
        // $this->orderBy = ['created_at', 'desc'];
        // $this->suggestListSearchColumn = 'name'; // used only for suggestList query
        // $this->suggestListSearchMode = 'startswith'; // contains, startswith, endswith. used only for suggestList query
        // $this->processRelationsManually = false; // if this is true, the function processRelationsAfterStore(Model $instance) & processRelationsAfterUpdate(Model $instance) should be implemented
        // $this->processMediaManually = false; // if this is true, the function processMediaAfterStore(Model $instance) & processMediaAfterUpdate(Model $instance) should be implemented
        // $this->downloadFileName = 'results';
    }

    private function searchFieldsOperations($data): array
    {
        return [
            // 'name' => OperationEnum::CONTAINS
        ];
    }

    protected function relations()
    {
        return [];

        /**
         * Mention all relations of the model here except belongsTo type. belongsTo column shall be treated just like any other column in the table (the request parameter shall match the column name).
         */
        // Example:
        // return [
        //     'publisher' => [
        //         'search_column' => 'name', // the column in relations table to be searched
        //         'sort_column' => 'id', // the column in relations table to be used for sorting.
        //     ],
        //     'tags' => [
        //         'search_column' => 'name'
        //     ],
        //     'inventory' => [], // this is a hasOne relation that doesn't need any search or sort action
        //     // Complex CRUD operation
        //     'articles' => [
        //         'store_fn' => function($instance, $val, $data) {
        //             // code to store the relation
        //         },
        //         'update_fn' => function($instance, $val, $data) {
        //             // code to update the relation
        //         },
        //     ]
        // ];
    }

    private function getMediaFields(): array
    {
        return [];
        // Example
        // return [
            // 'photo',
            // 'id_proof'
        // ]
    }

    public function getDownloadCols(): array
    {
        return [];
        // // Example
        // return [
        //     'title',
        //     'author.name'
        // ];
    }

    public function getDownloadColTitles(): array
    {
        return [
            // 'name' => 'Name',
            // 'author.name' => 'Author'
        ];
    }

    private function getQuery()
    {
        return $this->modelClass::query();
        // // Example:
        // return $this->modelClass::query()->with([
        //     'author' => function ($query) {
        //         $query->select('id', 'name');
        //     }
        // ]);
    }

    public function getStoreValidationRules(): array
    {
        return [];
        // Example:
        /*
        return [
            'title' => ['required', 'string'],
            'description' => ['required', 'string'],
            'publisher_id' => ['required', 'string'], // (belongsTo relation)
            'tags' => ['sometimes', 'array'], // (belongToMany relation)
            'tags.*' => ['integer'],
            'inventory.quantity' => ['required', 'integer'], // (hasOne relation. form element name="inventory[quantity]")
        ];
        */
    }

    public function getUpdateValidationRules($id = null): array
    {
        return [];
        // // Example:
        // $arr = $this->getStoreValidationRules();
        // return $arr;
    }

    public function processBeforeStore(array $data): array
    {
        // // Example:
        // $data['user_id'] = auth()->user()->id;

        return $data;
    }

    public function processBeforeUpdate(array $data): array
    {
        // // Example:
        // $data['user_id'] = auth()->user()->id;

        return $data;
    }

    public function processAfterStore($instance): void
    {
        //Do something with the created $instance
    }

    public function processAfterUpdate($oldInstance, $instance): void
    {
        //Do something with the updated $instance
    }
}

?>
